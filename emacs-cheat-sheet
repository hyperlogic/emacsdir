Basic
----------
Open File: C-x C-f
Quit: C-x C-c
Save: C-x C-s
Kill Buffer: C-x k
Switch Buffer: C-x <left arrow>
Undo: C-x u

Movement
------------
PageUp: M-v
PageDown: C-v
Center arond cursor: C-l
Up: C-p
Down: C-n
Left: C-f
Right: C-b
Left Word: M-f
Right Word: M-b
Begin of line: C-a
End of line: C-e
End of buffer: M->
Start of buffer: M-<

Repeat command n times: C-u n <CMD>
for example move down 120 lines: C-u 120 C-n

Delete: C-d
Delete from cursor to end of line: C-k

Mark Text (start selection): C-<space>
Kill Selection (cut): C-w
Yank (paste): C-y
Yank prev: M-y

Exchange Mark and cursor: C-x C-x

Info-Mode: C-h i

Search: C-s word
Search Up: C-r word
Next: C-s

Windows
----------
One buffer on screen: C-x 1
Split screen into 2 frames: C-x 2
Switch between frames on screen: C-x o
Switch between buffers: C-x <left-arrow> or C-x <right-arrow>

* c++ mode on header files 
(setq auto-mode-alist
      (append '(("\\.cpp$"  . c++-mode)
				("\\.h$"    . c++-mode)
				("\\.c$"    . c-mode)
				("\\.txt$"  . text-mode)
			    ("\\.rb$"   . ruby-mode))
			  auto-mode-alist))

* get rid of ~ files
;; Change backup behavior to save in a directory, not in a miscellany
;; of files all over the place.
(setq backup-by-copying t
	  backup-directory-alist '(("." . "~/.emacs.d/backups"))
	  delete-old-versions t
	  kept-new-versions 6
	  kept-old-versions 2
	  version-control t)


* create-scratch-buffer
;; create a new *scratch* buffer
(defun create-scratch-buffer nil
  "create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
  (interactive)
  (let ((n 0)
		bufname)
    (while (progn
    (setq bufname (concat "*scratch"
  (if (= n 0) "" (int-to-string n))
  "*"))
    (setq n (1+ n))
    (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (if (= n 1) (lisp-interaction-mode))))


Notes
--------
Esc can be used instead of meta key, M-y can executed by pressing ESC then pressing y.

Emacs Lisp
-------
Evaluate Prev Lisp Expression: C-x C-e
  Put the cursor at the end of an s-expression.

Evaluate Prev Lisp Expression & Print result in buffer: C-u C-x C-e
  Put the cursor at the end of an s-expression, then the result will be inserted into the buffer.

The first arg to set needs to be a symbol.
(set 'foo 2)

You can use setq instead to ommit the quote
(setq foo (+ 1 2))

You can do multiple setq's at once
(setq one 1
	  two 2)

Message is a printf like function
(message "wassup world, I gots %d %s" 2 "dollas")

(buffer-name)
(buffer-file-name)

(defun add-by-seven (n)
  "Adds seven to a number"
  (+ n 7))

(add-by-seven 2)

TODO
------------
* quickly open file by substring name
  like workspace wiz
  find-name-dired - crappy doesnt search sub dirs.

* search within set of files for substring & regexp
  grep-find

* jump to tag prototype & defininition

* compile cursor should stay at bottom. (keep scrolling)  end-of-buffer
